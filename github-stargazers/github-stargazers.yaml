#
# This is a workflow to get the GitHub Stargazers for the Humble Bundle winners
#

description: GitHub Stargazers for the Humble Bundle winners

functions:
  - id: http-request
    image: gcr.io/direktiv/functions/http-request:1.0
    type: knative-workflow
  - id: csvkit
    image: gcr.io/direktiv/functions/csvkit:1.0
    type: knative-workflow    

states:
  #
  # Get the number of stars for the project
  #
  - id: get-star-count
    log: Retrieve the number of stars for the direktiv project
    type: action
    action:
      function: http-request
      secrets: ["GITHUB_TOKEN"]
      input: 
        debug: true
        error200: true
        url: 'https://api.github.com/repos/direktiv/direktiv'
        headers:
          Authorization: 'Bearer jq(.secrets.GITHUB_TOKEN)'
          X-GitHub-Api-Version: "2022-11-28"
          Accept: application/vnd.github.v3.star+json
    transform: 'jq( { starcount: .return[0].result.stargazers_count, pagecount: ((.return[0].result.stargazers_count / 100) | ceil), stargazers: [] } )'
    transition: check-if-done

  - id: check-if-done 
    # log: jq(.)
    type: switch 
    conditions:
    - condition: 'jq((.pagecount - 1) >= 0 )'
      transition: get-stargazers
    defaultTransform: 'jq(del(.return))'
    defaultTransition: get-emails

  #
  # Get list of users
  #
  - id: get-stargazers
    log: Retrieve all the volumes not marked for deletion
    type: action
    action:
      function: http-request
      secrets: ["GITHUB_TOKEN"]
      input: 
        debug: true
        error200: true
        url: 'https://api.github.com/repos/direktiv/direktiv/stargazers?page=jq(.pagecount)&per_page=100'
        headers:
          Authorization: 'Bearer jq(.secrets.GITHUB_TOKEN)'
          X-GitHub-Api-Version: "2022-11-28"
          Accept: application/vnd.github.v3.star+json
    transform: 'jq( .pagecount = (.pagecount - 1)  | .stargazers += ([ .return[].result[] | { starred_at: .starred_at, user: .user.url } ]) | del(.return) )'
    transition: check-if-done

    #
  # Get email for each Stargazer
  #
  - id: get-emails
    # log: jq(.)
    log: Retrieve the emails for each of the Stargazers
    type: foreach
    array: jq(.stargazers)
    action:
      function: http-request
      secrets: ["GITHUB_TOKEN"]
      input: 
        debug: true
        error200: true
        url: 'jq(.user)'
        headers:
          Authorization: 'Bearer jq(.secrets.GITHUB_TOKEN)'
          X-GitHub-Api-Version: "2022-11-28"
          Accept: application/vnd.github.v3.star+json
    transform: 
      result: |
        js(
            var newArray = new Array();

            stargazerArray = data.stargazers
            userArray = data.return

            stargazerArray.forEach(stargazer => {
              userArray.forEach(user => {
                  if (stargazer.user === user[0].result.url) {
                    user[0].result.starred_at = stargazer.starred_at
                    newArray.push(user[0].result)
                  } 
              });
            });

            items = new Object()
            items.items = newArray
            return items
        )
    transition: convert-to-csv
    # transform: 'jq( { results: [ .result.items[] | { name: .name, email: .email, starred_at: .starred_at } ] | [ .[] | select (.starred_at | . == null or fromdateiso8601 > 1676419200) ] } )'

  #
  - id: convert-to-csv
    log: jq(.)
    # log: Retrieve the emails for each of the Stargazers
    type: action
    action:
      function: csvkit
      input:
        files: 
        - name: input.json
          data: |
            jq( ( [ .result.items[] | { name: .name, email: .email, starred_at: .starred_at } ] | [ .[] | select (.starred_at | . == null or fromdateiso8601 > 1676419200) ] ) | tostring )
        commands:
        - command: in2csv input.json > out/workflow/data.csv
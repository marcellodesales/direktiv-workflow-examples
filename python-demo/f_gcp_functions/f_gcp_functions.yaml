################################################################################
#
# This workflow needs the following secrets to be set
#  - GCP_KEY: ServiceAccount key for the Google Cloud Translator
#  - TWITTER_BEARERTOKEN: Bearer Token for the use with Twitter API
#
# This workflow needs the following inputs
#  - searchstring: the search string to be used to scan Twitter
#  - projectid: Project ID for Google Cloud
#  - location: Location for Google Cloud Translator access
#
description: A simple workflow that runs a container called py-tweets-lang from Google Cloud Functions

functions:
- id: get-request
  image: direktiv/request:latest
  type: knative-workflow

states:
# make sure all the inputs are set
- id: validate-input
  type: validate
  schema:
    title: Check Twitter Language Types
    type: object
    required: ["projectid", "location", "searchstring","maxsearchreturns","outputfile"]
    properties:
      projectid:
        title: GCP Project ID
        type: string
        default: "direktiv"
      location:
        title: GCP Location
        type: string
        default: "global"
      searchstring:
        title: Twitter Search String
        type: string
        default: "direktiv"
      maxsearchreturns:
        title: Maximum Search Results
        type: integer
        default: 10
      outputfile:
        title: Output file location
        type: string
        default: "/tmp/output.json"        
  transition: get-tweets

- id: get-tweets
  type: action
  action:
    function: get-request
    secrets: ["TWITTER_BEARERTOKEN"]
    input:
      url: "https://get-tweet-vk6hhspzqa-uw.a.run.app"
      method: POST
      headers:
        "Content-Type": "application/json"
      body:
        bearertoken: jq(.secrets.TWITTER_BEARERTOKEN)
        searchstring: jq(.searchstring)
        maxsearchreturns: jq(.maxsearchreturns)
        outputfile: jq(.outputfile)
  transition: log-tweets

- id: log-tweets
  type: noop
  log: jq(.return.body)
  transition: get-lang

- id: get-lang
  type: action
  action:
    function: get-request
    secrets: ["GCP_KEY"]
    input:
      url: "https://get-lang-vk6hhspzqa-uw.a.run.app"
      method: POST
      headers:
        "Content-Type": "application/json"
      body:
        projectid: jq(.projectid)
        location: jq(.location)
        outputfile: jq(.outputfile)
        gcpkey: jq(.secrets.GCP_KEY | fromjson)
        tweets: jq(.return.body.tweets)
  transition: log-lang
  transform: 'jq({ results: .return.body })'

- id: log-lang
  type: noop
  log: jq(.)
# Example workflow: 'Sending emails using a bare SMTP client'
# 
#
# This workflow uses the SMTP listener service. The workflow receives an email as a
# CloudEvent from the SMTP listener. The workflow will compress & encrypt the attachments
# with a random password and email this to all external email addresses. For internal email
# addresses no encryption or compression occurs. Once completed, the workflow sends the
# password to a mobile address defined in the format 61404193552@direktiv.local
#
#
# Medium article: https://medium.com/@wilhelm-wonigkeit/direktiv-encrypting-server-side-email-attachments-in-the-real-world-d18a7bccb36c
#
# Inputs:
# { }
# 
#

description: Send an encrypted external email and unecrypted email & password to the internal addresses

# This workflow uses the smpt-bare plugin, as we need to modify
# some of the fields within the SMTP client for the encrypted 
# messages.
functions:
  - id: send-email
    image: direktiv/smtp-bare:latest
    type: reusable
    files:
    - key: zipfile
      scope: instance
      as: attach.zip
      type: plain
  - id: send-twilio-message
    image: direktiv/twilio:latest
    type: reusable
    
states:
  # For the incoming email, store the attachments in an internal
  # variable only available to the running instance of this workflow.
  - id: store-zip
    type: setter
    #log: jq(.)
    variables:
    - key: zipfile
      scope: instance
      value: jq(.data)
    transition: check-email-domain

  # Check if the email domain matches the configured "internal" email
  # domain of the SMTP listener or if it matches the passwword destination
  # using the <number@direktiv.local> configuration.
  - id: check-email-domain
    #log: jq(.)
    type: switch
    conditions:
    - condition: 'jq((.email | split("@")[1]) == .internal)'
      transition: send-internal
    - condition: 'jq((.email | split("@")[1]) == "direktiv.local")'
      transition: send-password      
    defaultTransition: send-external

  # Send an unencrypted email message with the attachments.
  - id: send-internal
    type: action
    action:
      secrets: ["EMAIL_USER", "EMAIL_PW"]
      function: send-email
      input:
        address: "smtp.gmail.com"
        port: 587
        tls: true
        from: jq(.secrets.EMAIL_USER)
        password: jq(.secrets.EMAIL_PW)
        to: 'jq([.email])'
        subject: jq(.subject)
        body: jq(.message)
        attachments: jq(.attachments)

  # Using the Twilio container to send the password as a
  # mobile message to the approved number
  - id: send-password
    type: action
    action:
      secrets: ["TWILIO_TOKEN", "TWILIO_SID"]
      function: send-twilio-message
      input:
        typeof: "sms"
        sid: jq(.secrets.TWILIO_SID)
        token: jq(.secrets.TWILIO_TOKEN)
        message: 'jq(.password + " is the password to access the zip in the previous email.")'
        from: "+15097742730"
        to: 'jq("+" + ((.email | split("@")[0])|tostring))'

  # Send an encrypted email message with the attachments.
  - id: send-external
    type: action
    action:
      secrets: ["EMAIL_USER", "EMAIL_PW"]
      function: send-email
      input:       
        address: "smtp.gmail.com"
        port: 587
        tls: true
        from: jq(.secrets.EMAIL_USER)
        password: jq(.secrets.EMAIL_PW)
        to: 'jq([.email])'
        subject: jq(.subject)
        body: jq(.message)
        attachments:
        - name: attach.zip
          type: base64
